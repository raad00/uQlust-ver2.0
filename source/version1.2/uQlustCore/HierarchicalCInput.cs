using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using uQlustCore.Interface;
using uQlustCore.Profiles;

namespace uQlustCore
{
   
    public class HierarchicalCInput:BaseCInput,IAutomaticProfiles
    {
           [Description("K-means algorithm: Value of DB index")]
           public float indexDB=1.4f;
           [Description("Hierarchical K-means algorithm: Minimal number of structures in the node, below that number noew nodes will")]
           public int numberOfStruct=40;
           [Description("FastDendrog algorithm: number of nodes generated by K-means. For found nodes regular dendrog is used")]
           public int numInitNodes=20;
           [Description("Hierarchical K-means algorithm: How many times K-means, for each of the level,  will be repeated")]
           public int repeatTime=4;
           [Description("Hierarchical K-means algorithm: from 2 to this number all k-NN will be checked to find best indexDB")]
           public int maxK=6;
           [Description("Needed for aglomerative clustering, defines type of linkage")]
           public AglomerativeType linkageType = AglomerativeType.AVERAGE;
           [Description("Distance measures used for clustering")]
           public DistanceMeasures distance = DistanceMeasures.RMSD;
           [Description("In case of RMSD or MAXSUB which atoms should be used")]
           public PDB.PDBMODE atoms=PDB.PDBMODE.ONLY_CA;
           [Description("Path to the profile for weighted hamming distance [HIERARCHICAL]")]
           public string hammingProfile;
         //  [Description("Path to the profile for 1djury [HIERARCHICAL]")]
//           public string jury1DProfile;
           [Description("Path to the profile for 1djury for consensus [HIERARCHICAL]")]
           public string consensusProfile;
           [Description("Iterate 2-means ")]
           public bool ItMeans=false;
           [Description("Number of iterations in 2 means")]
           public int ItNum=3;
           [Description("Use hamming consensus ")]
           public bool HConsensus;
           [Description("Hash clustering: Do you want to use regularization")]
           public bool hashRegular = false;
           [Description("Regularization: size of the window ")]
           public int hashWSize = 7;
           [Description("Regularization: Threshold distance below the threshold will lead to consensus state ")]
           public int hashRegThreshold = 1;
           [Description("Use 1Djury to find consesnsus states ")]
           public bool hashJury=true;
           [Description("Profile name")]
           public string hashProfileName;
           [Description("Profile name for regularization")]
           public string hashProfileNameReg;
           [Description("Hash req clusters")]
            public int reqClusters=1000;
           [Description("Use 1DJury to find reference vectors in hash")]
           public bool reference1DjuryH;
           [Description("Use 1DJury to find reference vectors in kmeans")]
           public bool reference1DjuryKmeans;
           [Description("Use 1DJury to find reference vectors in Aglomerative")]
           public bool reference1DjuryAglom;
           [Description("Use 1DJury to find reference vectors in Fast")]
           public bool reference1DjuryFast;
           [Description("Path to the profile for 1djury hash")]
           public string jury1DProfileH;
           [Description("Path to the profile for 1djury Kmeans")]
           public string jury1DProfileKmeans;
           [Description("Path to the profile for 1djury Aglomerative")]
           public string jury1DProfileAglom;
           [Description("Path to the profile for 1djury Fast")]
           public string jury1DProfileFast;
                                


           //Not saved
           public HashCInput hash
           {
               set 
               {
                   hashRegular = value.regular;
                   hashWSize = value.wSize;
                   hashRegThreshold = value.regThreshold;
                   hashJury = value.jury;
                   hashProfileName = value.profileName;
                   hashProfileNameReg = value.profileNameReg;
                   reqClusters = value.reqClusters;
               }
               get
               {
                   HashCInput aux = new HashCInput();
                   aux.regular=hashRegular;
                   aux.wSize=hashWSize;
                   aux.regThreshold=hashRegThreshold;
                   aux.jury=hashJury;
                   aux.profileName=hashProfileName;
                   aux.profileNameReg=hashProfileNameReg;

                   aux.reqClusters = reqClusters;
                   aux.fcolumns = false;
                   return aux;

               }
           }
           public void GenerateAutomaticProfiles(string fileName)
           {               
               ProfileTree  t = ProfileAutomatic.AnalyseProfileFile(fileName, SIMDIST.DISTANCE);
               string profileName = "automatic_distance.profile";
               t.SaveProfiles(profileName);
               hammingProfile = profileName;
               t = ProfileAutomatic.AnalyseProfileFile(fileName, SIMDIST.SIMILARITY);
               profileName = "automatic_similarity.profile";
               t.SaveProfiles(profileName);
               consensusProfile = profileName;
               hashProfileName = profileName;
               hashProfileNameReg = profileName;
               jury1DProfileH = profileName;
               jury1DProfileKmeans = profileName;
               jury1DProfileAglom = profileName;
               jury1DProfileFast = profileName;
           }
          

    }
}
